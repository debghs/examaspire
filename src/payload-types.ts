/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    accordion: AccordionBlock;
    button: ButtonBlock;
    carousel: CarouselBlock;
    cta: CTABlock;
    featuresSection: FeaturesSectionBlock;
    formBlock: FormBlock;
    gap: GapBlock;
    grid: GridBlock;
    heroSection: HeroSectionBlock;
    pageLayout: PageLayoutBlock;
  };
  collections: {
    pages: Page;
    users: User;
    media: Media;
    questions: Question;
    exams: Exam;
    results: Result;
    submissions: Submission;
    tags: Tag;
    search: Search;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    questions: QuestionsSelect<false> | QuestionsSelect<true>;
    exams: ExamsSelect<false> | ExamsSelect<true>;
    results: ResultsSelect<false> | ResultsSelect<true>;
    submissions: SubmissionsSelect<false> | SubmissionsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    nav: Nav;
  };
  globalsSelect: {
    nav: NavSelect<false> | NavSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AccordionBlock".
 */
export interface AccordionBlock {
  /**
   * Add accordion items
   */
  items: {
    /**
     * Title of the accordion item
     */
    title: string;
    /**
     * Content of the accordion item
     */
    content: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    /**
     * Whether this item should be open by default
     */
    defaultOpen?: boolean | null;
    id?: string | null;
  }[];
  behavior?: {
    /**
     * Allow multiple items to be open simultaneously
     */
    allowMultiple?: boolean | null;
    /**
     * Collapse other items when opening a new one
     */
    collapseOthers?: boolean | null;
    /**
     * Enable smooth animations
     */
    animated?: boolean | null;
  };
  appearance?: {
    /**
     * Alignment of the accordion content
     */
    position?: ('left' | 'center' | 'right') | null;
    /**
     * Show border around the accordion
     */
    showBorder?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'accordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ButtonBlock".
 */
export interface ButtonBlock {
  label: string;
  link: string;
  appearance?: {
    style?: ('primary' | 'secondary' | 'outline' | 'text') | null;
    size?: ('xs' | 'small' | 'default' | 'large') | null;
    position?: ('left' | 'center' | 'right') | null;
    icon?: {
      /**
       * Add an arrow icon to the button
       */
      enabled?: boolean | null;
      position?: ('left' | 'right') | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'button';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CarouselBlock".
 */
export interface CarouselBlock {
  header?: {
    /**
     * Main title for the carousel section
     */
    title?: string | null;
    /**
     * Optional description text
     */
    description?: string | null;
    alignment?: ('left' | 'center' | 'right') | null;
  };
  /**
   * Add carousel slides
   */
  slides: {
    type?: ('image' | 'testimonial' | 'content') | null;
    image?: (number | null) | Media;
    testimonial?: {
      quote: string;
      author: {
        name: string;
        title?: string | null;
        avatar?: (number | null) | Media;
      };
    };
    content?: {
      title: string;
      description?: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      media?: (number | null) | Media;
      link?: {
        text?: string | null;
        url?: string | null;
      };
    };
    id?: string | null;
  }[];
  settings?: {
    autoplay?: {
      enabled?: boolean | null;
      /**
       * Time in milliseconds between slides
       */
      interval?: number | null;
      pauseOnHover?: boolean | null;
    };
    navigation?: {
      arrows?: boolean | null;
      dots?: boolean | null;
    };
  };
  appearance?: {
    width?: ('default' | 'wide' | 'full' | 'narrow') | null;
    aspectRatio?: ('16/9' | '4/3' | '1/1' | 'auto') | null;
    alignment?: ('left' | 'center' | 'right') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'carousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTABlock".
 */
export interface CTABlock {
  content: {
    title: string;
    description?: string | null;
    button: {
      text: string;
      link: string;
    };
  };
  image?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesSectionBlock".
 */
export interface FeaturesSectionBlock {
  header: {
    /**
     * A short text that appears above the main title
     */
    label?: string | null;
    title: string;
    description?: string | null;
  };
  /**
   * Add up to 6 features to showcase
   */
  features: {
    /**
     * Upload an icon (SVG recommended)
     */
    icon?: (number | null) | Media;
    title: string;
    description: string;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'featuresSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GapBlock".
 */
export interface GapBlock {
  gapType: 'horizontal' | 'vertical';
  /**
   * Select the size of gap
   */
  size: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  id?: string | null;
  blockName?: string | null;
  blockType: 'gap';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GridBlock".
 */
export interface GridBlock {
  /**
   * Add content blocks to the grid
   */
  items: {
    /**
     * Internal title for this grid item (for admin reference)
     */
    title: string;
    /**
     * Add content blocks to this grid item
     */
    blocks: (
      | HeadingBlock
      | ParagraphBlock
      | ImageBlock
      | ButtonBlock
      | VideoBlock
      | GapBlock
      | UnifiedCardBlock
      | FormBlock
      | AccordionBlock
      | CarouselBlock
      | TestimonialBlock
    )[];
    appearance?: {
      padding?: {
        x?: ('none' | 'small' | 'default' | 'large') | null;
        y?: ('none' | 'small' | 'default' | 'large') | null;
      };
      /**
       * Space between components within this grid item
       */
      spacing?: ('none' | 'small' | 'default' | 'large') | null;
    };
    id?: string | null;
  }[];
  layout?: {
    /**
     * Position of the grid container
     */
    containerPosition?: ('left' | 'center' | 'right') | null;
    columns?: {
      /**
       * Number of columns on desktop (≥1024px)
       */
      desktop?: ('1' | '2' | '3' | '4' | '6') | null;
      /**
       * Number of columns on tablet (≥768px)
       */
      tablet?: ('1' | '2' | '3') | null;
      /**
       * Number of columns on mobile (<768px)
       */
      mobile?: ('1' | '2') | null;
    };
    gap?: {
      /**
       * Horizontal spacing between grid items
       */
      x?: ('none' | 'small' | 'default' | 'large') | null;
      /**
       * Vertical spacing between grid items
       */
      y?: ('none' | 'small' | 'default' | 'large') | null;
    };
    /**
     * Vertical alignment of grid items
     */
    alignment?: ('start' | 'center' | 'end' | 'stretch') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'grid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeadingBlock".
 */
export interface HeadingBlock {
  text: string;
  /**
   * Select heading level
   */
  level: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
  /**
   * Choose text alignment
   */
  alignment?: ('left' | 'center' | 'right') | null;
  /**
   * Select text color from design system
   */
  color?:
    | ('text-black' | 'text-gray-800' | 'text-[#201A09]' | 'text-[#AB2217]' | 'text-[#A07D1C]' | 'text-[#F5EFDB]')
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heading';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ParagraphBlock".
 */
export interface ParagraphBlock {
  text: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Choose text alignment
   */
  alignment?: ('left' | 'center' | 'right' | 'justify') | null;
  appearance?: {
    /**
     * Select font weight based on design system
     */
    weight?: ('normal' | 'medium' | 'bold') | null;
    /**
     * Select text color based on design system
     */
    color?:
      | ('text-black' | 'text-bianca-600' | 'text-bianca-700' | 'text-[#A07D1C]' | 'text-[#AB2217]' | 'text-bianca-200')
      | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'paragraph';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlock".
 */
export interface ImageBlock {
  /**
   * Upload or select an image
   */
  image: number | Media;
  content: {
    caption?: string | null;
    /**
     * Describe the image for screen readers and SEO
     */
    altText: string;
  };
  appearance?: {
    width?: ('default' | 'wide' | 'full' | 'small') | null;
    aspectRatio?: ('auto' | '16/9' | '4/3' | '1/1' | '3/4') | null;
    roundedCorners?: ('none' | 'default' | 'large' | 'full') | null;
    /**
     * Add a border around the image
     */
    border?: boolean | null;
    shadow?: ('none' | 'sm' | 'md' | 'lg') | null;
  };
  link?: {
    /**
     * Make the image clickable
     */
    enabled?: boolean | null;
    url?: string | null;
    /**
     * Open link in new tab
     */
    openInNewTab?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'image';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock".
 */
export interface VideoBlock {
  source: 'upload' | 'youtube';
  /**
   * Upload or select a video file
   */
  uploadedVideo?: (number | null) | Media;
  /**
   * Paste the full video URL
   */
  embedUrl?: string | null;
  content?: {
    title?: string | null;
    caption?: string | null;
  };
  appearance?: {
    width?: ('default' | 'wide' | 'full') | null;
    aspectRatio?: ('16/9' | '4/3' | '1/1') | null;
    roundedCorners?: ('none' | 'default' | 'large') | null;
  };
  playback?: {
    /**
     * Autoplay video on load (may be blocked by browsers)
     */
    autoplay?: boolean | null;
    /**
     * Start video muted
     */
    muted?: boolean | null;
    /**
     * Loop video playback
     */
    loop?: boolean | null;
    /**
     * Show video controls
     */
    controls?: boolean | null;
    /**
     * Video preload behavior
     */
    preload?: ('none' | 'metadata' | 'auto') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'video';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UnifiedCardBlock".
 */
export interface UnifiedCardBlock {
  /**
   * Add one or more cards to display
   */
  cards: {
    media: {
      type: 'image' | 'video' | 'icon';
      image?: (number | null) | Media;
      video?: {
        url: string;
        thumbnail?: (number | null) | Media;
        autoPlay?: boolean | null;
        muted?: boolean | null;
        loop?: boolean | null;
      };
      icon?: {
        /**
         * Icon component name from your icon library
         */
        name: string;
        color?: ('default' | 'primary' | 'secondary' | 'brand') | null;
      };
    };
    content: {
      title: string;
      description?: string | null;
      tags?:
        | {
            text: string;
            color?: ('default' | 'primary' | 'success' | 'warning' | 'error') | null;
            id?: string | null;
          }[]
        | null;
    };
    link?: {
      type?: ('none' | 'internal' | 'external') | null;
      url?: string | null;
      text?: string | null;
      newTab?: boolean | null;
    };
    id?: string | null;
  }[];
  layout: {
    variant: 'rectangular' | 'square' | 'horizontal';
    columns?: {
      desktop?: ('1' | '2' | '3' | '4' | '5' | '6') | null;
      tablet?: ('1' | '2' | '3' | '4') | null;
      mobile?: ('1' | '2') | null;
    };
    gap?: ('small' | 'default' | 'large') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'card';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock".
 */
export interface TestimonialBlock {
  items: {
    quote: string;
    author: {
      name: string;
      title?: string | null;
      company?: string | null;
    };
    image?: (number | null) | Media;
    rating?: ('1' | '2' | '3' | '4' | '5') | null;
    id?: string | null;
  }[];
  style?: {
    columns?: ('1' | '2' | '3' | '4') | null;
    variant?: ('card' | 'quote' | 'minimal') | null;
    spacing?: ('none' | 'small' | 'medium' | 'large') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonial';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroSectionBlock".
 */
export interface HeroSectionBlock {
  /**
   * Choose a background image for the hero section
   */
  backgroundImage: number | Media;
  content: {
    title: string;
    subtitle?: string | null;
  };
  cta: {
    label: string;
    link: string;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PageLayoutBlock".
 */
export interface PageLayoutBlock {
  container?: {
    /**
     * Select the container width
     */
    width?: ('default' | 'wide' | 'full' | 'narrow') | null;
    padding?: {
      /**
       * Horizontal padding
       */
      x?: ('none' | 'small' | 'default' | 'large') | null;
      /**
       * Vertical padding
       */
      y?: ('none' | 'small' | 'default' | 'large') | null;
    };
    /**
     * Space between child blocks
     */
    spacing?: ('none' | 'small' | 'default' | 'large') | null;
  };
  bg?: {
    color?: ('none' | 'white' | 'gray-50' | 'gray-100') | null;
    /**
     * Optional background image
     */
    image?: (number | null) | Media;
    overlay?: {
      type?: ('black' | 'white') | null;
      opacity?: ('0' | '25' | '50' | '75') | null;
    };
  };
  border?: {
    enabled?: boolean | null;
    position?: ('all' | 'top' | 'bottom') | null;
  };
  blocks: (
    | HeadingBlock
    | ParagraphBlock
    | ButtonBlock
    | FormBlock
    | HeroSectionBlock
    | FeaturesSectionBlock
    | AccordionBlock
    | TabsBlock
    | TestimonialBlock
    | PricingBlock
    | VideoBlock
    | ImageBlock
    | GridBlock
    | GapBlock
    | TimelineBlock
    | CTABlock
    | CarouselBlock
    | UnifiedCardBlock
  )[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pageLayout';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock".
 */
export interface TabsBlock {
  /**
   * Add at least two tabs
   */
  tabs: {
    /**
     * Tab label shown in the navigation
     */
    label: string;
    icon?: {
      type?: ('none' | 'icon' | 'image') | null;
      /**
       * Icon component name from your icon library
       */
      iconName?: string | null;
      image?: (number | null) | Media;
    };
    content?: {
      type?: ('richText' | 'blocks') | null;
      richText?: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      blocks?:
        | (
            | HeadingBlock
            | ParagraphBlock
            | ImageBlock
            | ButtonBlock
            | GapBlock
            | VideoBlock
            | UnifiedCardBlock
            | FormBlock
            | AccordionBlock
            | CarouselBlock
            | TestimonialBlock
          )[]
        | null;
    };
    id?: string | null;
  }[];
  style?: {
    variant?: ('default' | 'pills' | 'underline') | null;
    size?: ('small' | 'default' | 'large') | null;
    tabAlignment?: ('left' | 'center' | 'right' | 'full') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'tabs';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PricingBlock".
 */
export interface PricingBlock {
  plans: {
    name: string;
    price: {
      amount: number;
      currency?: ('INR' | 'USD' | 'EUR' | 'GBP') | null;
      period?: ('/month' | '/year' | '') | null;
    };
    description?: string | null;
    features?:
      | {
          text: string;
          included?: boolean | null;
          id?: string | null;
        }[]
      | null;
    cta: {
      text: string;
      link: string;
      variant?: ('primary' | 'secondary' | 'outline') | null;
    };
    highlighted?: boolean | null;
    id?: string | null;
  }[];
  layout?: {
    columns?: ('2' | '3') | null;
    style?: ('cards' | 'minimal') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricing';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimelineBlock".
 */
export interface TimelineBlock {
  /**
   * Add timeline items
   */
  items: {
    /**
     * Date or time period (e.g. "2023", "Q4 2023", "Jan 2023")
     */
    date: string;
    content: {
      title: string;
      description: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      };
      /**
       * Optional image or icon
       */
      media?: (number | null) | Media;
    };
    id?: string | null;
  }[];
  layout?: {
    style?: ('vertical' | 'horizontal') | null;
    density?: ('compact' | 'default' | 'comfortable') | null;
    connector?: ('solid' | 'dashed' | 'dotted') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'timeline';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  blocks: (
    | AccordionBlock
    | ButtonBlock
    | CarouselBlock
    | CTABlock
    | FeaturesSectionBlock
    | FormBlock
    | GapBlock
    | GridBlock
    | HeadingBlock
    | HeroSectionBlock
    | ImageBlock
    | PageLayoutBlock
    | ParagraphBlock
    | PricingBlock
    | TabsBlock
    | TestimonialBlock
    | TimelineBlock
    | UnifiedCardBlock
    | VideoBlock
  )[];
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  createdBy?: (number | User)[] | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  roles?: ('admin' | 'teacher' | 'student')[] | null;
  active?: boolean | null;
  tags?: (number | Tag)[] | null;
  createdBy?: (number | User)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  description?: string | null;
  createdBy?: (number | User)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions".
 */
export interface Question {
  id: number;
  questionText: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Add images or videos to your question
   */
  media?:
    | {
        type: 'image' | 'video';
        image?: (number | null) | Media;
        /**
         * Enter a video URL (e.g., YouTube, Vimeo)
         */
        video?: string | null;
        id?: string | null;
      }[]
    | null;
  type: 'mcq' | 'subjective';
  options?:
    | {
        text: string;
        isCorrect: boolean;
        id?: string | null;
      }[]
    | null;
  correctAnswer?: string | null;
  marks: number;
  hasNegativeMarking?: boolean | null;
  /**
   * Marks to be deducted for wrong answers
   */
  negativeMarks?: number | null;
  difficulty: 'easy' | 'medium' | 'hard';
  /**
   * Explanation of the correct answer
   */
  explanation?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  slug?: string | null;
  slugLock?: boolean | null;
  createdBy?: (number | User)[] | null;
  tags?: (number | Tag)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exams".
 */
export interface Exam {
  id: number;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  questions: (number | Question)[];
  /**
   * Duration in minutes
   */
  duration: number;
  totalMarks: number;
  status: 'draft' | 'published' | 'archived' | 'virtual';
  startDate: string;
  endDate: string;
  slug?: string | null;
  slugLock?: boolean | null;
  createdBy?: (number | User)[] | null;
  tags?: (number | Tag)[] | null;
  /**
   * Cover image for the exam
   */
  image?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "results".
 */
export interface Result {
  id: number;
  exam: number | Exam;
  student: number | User;
  submission: number | Submission;
  score: number;
  percentage: number;
  correctAnswers: number;
  incorrectAnswers: number;
  feedback?: string | null;
  gradedAt: string;
  slug?: string | null;
  slugLock?: boolean | null;
  displayTitle?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions".
 */
export interface Submission {
  id: number;
  exam: number | Exam;
  student: number | User;
  answers?:
    | {
        questionIndex: number;
        selectedOption: number;
        id?: string | null;
      }[]
    | null;
  startTime: string;
  submittedAt?: string | null;
  status: 'in-progress' | 'submitted' | 'timed-out';
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'pages';
    value: number | Page;
  };
  searchableContent?: string | null;
  href?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'questions';
        value: number | Question;
      } | null)
    | ({
        relationTo: 'exams';
        value: number | Exam;
      } | null)
    | ({
        relationTo: 'results';
        value: number | Result;
      } | null)
    | ({
        relationTo: 'submissions';
        value: number | Submission;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  blocks?:
    | T
    | {
        accordion?: T | AccordionBlockSelect<T>;
        button?: T | ButtonBlockSelect<T>;
        carousel?: T | CarouselBlockSelect<T>;
        cta?: T | CTABlockSelect<T>;
        featuresSection?: T | FeaturesSectionBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        gap?: T | GapBlockSelect<T>;
        grid?: T | GridBlockSelect<T>;
        heading?: T | HeadingBlockSelect<T>;
        heroSection?: T | HeroSectionBlockSelect<T>;
        image?: T | ImageBlockSelect<T>;
        pageLayout?: T | PageLayoutBlockSelect<T>;
        paragraph?: T | ParagraphBlockSelect<T>;
        pricing?: T | PricingBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        testimonial?: T | TestimonialBlockSelect<T>;
        timeline?: T | TimelineBlockSelect<T>;
        card?: T | UnifiedCardBlockSelect<T>;
        video?: T | VideoBlockSelect<T>;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  createdBy?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AccordionBlock_select".
 */
export interface AccordionBlockSelect<T extends boolean = true> {
  items?:
    | T
    | {
        title?: T;
        content?: T;
        defaultOpen?: T;
        id?: T;
      };
  behavior?:
    | T
    | {
        allowMultiple?: T;
        collapseOthers?: T;
        animated?: T;
      };
  appearance?:
    | T
    | {
        position?: T;
        showBorder?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ButtonBlock_select".
 */
export interface ButtonBlockSelect<T extends boolean = true> {
  label?: T;
  link?: T;
  appearance?:
    | T
    | {
        style?: T;
        size?: T;
        position?: T;
        icon?:
          | T
          | {
              enabled?: T;
              position?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CarouselBlock_select".
 */
export interface CarouselBlockSelect<T extends boolean = true> {
  header?:
    | T
    | {
        title?: T;
        description?: T;
        alignment?: T;
      };
  slides?:
    | T
    | {
        type?: T;
        image?: T;
        testimonial?:
          | T
          | {
              quote?: T;
              author?:
                | T
                | {
                    name?: T;
                    title?: T;
                    avatar?: T;
                  };
            };
        content?:
          | T
          | {
              title?: T;
              description?: T;
              media?: T;
              link?:
                | T
                | {
                    text?: T;
                    url?: T;
                  };
            };
        id?: T;
      };
  settings?:
    | T
    | {
        autoplay?:
          | T
          | {
              enabled?: T;
              interval?: T;
              pauseOnHover?: T;
            };
        navigation?:
          | T
          | {
              arrows?: T;
              dots?: T;
            };
      };
  appearance?:
    | T
    | {
        width?: T;
        aspectRatio?: T;
        alignment?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTABlock_select".
 */
export interface CTABlockSelect<T extends boolean = true> {
  content?:
    | T
    | {
        title?: T;
        description?: T;
        button?:
          | T
          | {
              text?: T;
              link?: T;
            };
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesSectionBlock_select".
 */
export interface FeaturesSectionBlockSelect<T extends boolean = true> {
  header?:
    | T
    | {
        label?: T;
        title?: T;
        description?: T;
      };
  features?:
    | T
    | {
        icon?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GapBlock_select".
 */
export interface GapBlockSelect<T extends boolean = true> {
  gapType?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GridBlock_select".
 */
export interface GridBlockSelect<T extends boolean = true> {
  items?:
    | T
    | {
        title?: T;
        blocks?:
          | T
          | {
              heading?: T | HeadingBlockSelect<T>;
              paragraph?: T | ParagraphBlockSelect<T>;
              image?: T | ImageBlockSelect<T>;
              button?: T | ButtonBlockSelect<T>;
              video?: T | VideoBlockSelect<T>;
              gap?: T | GapBlockSelect<T>;
              card?: T | UnifiedCardBlockSelect<T>;
              formBlock?: T | FormBlockSelect<T>;
              accordion?: T | AccordionBlockSelect<T>;
              carousel?: T | CarouselBlockSelect<T>;
              testimonial?: T | TestimonialBlockSelect<T>;
            };
        appearance?:
          | T
          | {
              padding?:
                | T
                | {
                    x?: T;
                    y?: T;
                  };
              spacing?: T;
            };
        id?: T;
      };
  layout?:
    | T
    | {
        containerPosition?: T;
        columns?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
            };
        gap?:
          | T
          | {
              x?: T;
              y?: T;
            };
        alignment?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeadingBlock_select".
 */
export interface HeadingBlockSelect<T extends boolean = true> {
  text?: T;
  level?: T;
  alignment?: T;
  color?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ParagraphBlock_select".
 */
export interface ParagraphBlockSelect<T extends boolean = true> {
  text?: T;
  alignment?: T;
  appearance?:
    | T
    | {
        weight?: T;
        color?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageBlock_select".
 */
export interface ImageBlockSelect<T extends boolean = true> {
  image?: T;
  content?:
    | T
    | {
        caption?: T;
        altText?: T;
      };
  appearance?:
    | T
    | {
        width?: T;
        aspectRatio?: T;
        roundedCorners?: T;
        border?: T;
        shadow?: T;
      };
  link?:
    | T
    | {
        enabled?: T;
        url?: T;
        openInNewTab?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "VideoBlock_select".
 */
export interface VideoBlockSelect<T extends boolean = true> {
  source?: T;
  uploadedVideo?: T;
  embedUrl?: T;
  content?:
    | T
    | {
        title?: T;
        caption?: T;
      };
  appearance?:
    | T
    | {
        width?: T;
        aspectRatio?: T;
        roundedCorners?: T;
      };
  playback?:
    | T
    | {
        autoplay?: T;
        muted?: T;
        loop?: T;
        controls?: T;
        preload?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "UnifiedCardBlock_select".
 */
export interface UnifiedCardBlockSelect<T extends boolean = true> {
  cards?:
    | T
    | {
        media?:
          | T
          | {
              type?: T;
              image?: T;
              video?:
                | T
                | {
                    url?: T;
                    thumbnail?: T;
                    autoPlay?: T;
                    muted?: T;
                    loop?: T;
                  };
              icon?:
                | T
                | {
                    name?: T;
                    color?: T;
                  };
            };
        content?:
          | T
          | {
              title?: T;
              description?: T;
              tags?:
                | T
                | {
                    text?: T;
                    color?: T;
                    id?: T;
                  };
            };
        link?:
          | T
          | {
              type?: T;
              url?: T;
              text?: T;
              newTab?: T;
            };
        id?: T;
      };
  layout?:
    | T
    | {
        variant?: T;
        columns?:
          | T
          | {
              desktop?: T;
              tablet?: T;
              mobile?: T;
            };
        gap?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock_select".
 */
export interface TestimonialBlockSelect<T extends boolean = true> {
  items?:
    | T
    | {
        quote?: T;
        author?:
          | T
          | {
              name?: T;
              title?: T;
              company?: T;
            };
        image?: T;
        rating?: T;
        id?: T;
      };
  style?:
    | T
    | {
        columns?: T;
        variant?: T;
        spacing?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroSectionBlock_select".
 */
export interface HeroSectionBlockSelect<T extends boolean = true> {
  backgroundImage?: T;
  content?:
    | T
    | {
        title?: T;
        subtitle?: T;
      };
  cta?:
    | T
    | {
        label?: T;
        link?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PageLayoutBlock_select".
 */
export interface PageLayoutBlockSelect<T extends boolean = true> {
  container?:
    | T
    | {
        width?: T;
        padding?:
          | T
          | {
              x?: T;
              y?: T;
            };
        spacing?: T;
      };
  bg?:
    | T
    | {
        color?: T;
        image?: T;
        overlay?:
          | T
          | {
              type?: T;
              opacity?: T;
            };
      };
  border?:
    | T
    | {
        enabled?: T;
        position?: T;
      };
  blocks?:
    | T
    | {
        heading?: T | HeadingBlockSelect<T>;
        paragraph?: T | ParagraphBlockSelect<T>;
        button?: T | ButtonBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        heroSection?: T | HeroSectionBlockSelect<T>;
        featuresSection?: T | FeaturesSectionBlockSelect<T>;
        accordion?: T | AccordionBlockSelect<T>;
        tabs?: T | TabsBlockSelect<T>;
        testimonial?: T | TestimonialBlockSelect<T>;
        pricing?: T | PricingBlockSelect<T>;
        video?: T | VideoBlockSelect<T>;
        image?: T | ImageBlockSelect<T>;
        grid?: T | GridBlockSelect<T>;
        gap?: T | GapBlockSelect<T>;
        timeline?: T | TimelineBlockSelect<T>;
        cta?: T | CTABlockSelect<T>;
        carousel?: T | CarouselBlockSelect<T>;
        card?: T | UnifiedCardBlockSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TabsBlock_select".
 */
export interface TabsBlockSelect<T extends boolean = true> {
  tabs?:
    | T
    | {
        label?: T;
        icon?:
          | T
          | {
              type?: T;
              iconName?: T;
              image?: T;
            };
        content?:
          | T
          | {
              type?: T;
              richText?: T;
              blocks?:
                | T
                | {
                    heading?: T | HeadingBlockSelect<T>;
                    paragraph?: T | ParagraphBlockSelect<T>;
                    image?: T | ImageBlockSelect<T>;
                    button?: T | ButtonBlockSelect<T>;
                    gap?: T | GapBlockSelect<T>;
                    video?: T | VideoBlockSelect<T>;
                    card?: T | UnifiedCardBlockSelect<T>;
                    formBlock?: T | FormBlockSelect<T>;
                    accordion?: T | AccordionBlockSelect<T>;
                    carousel?: T | CarouselBlockSelect<T>;
                    testimonial?: T | TestimonialBlockSelect<T>;
                  };
            };
        id?: T;
      };
  style?:
    | T
    | {
        variant?: T;
        size?: T;
        tabAlignment?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PricingBlock_select".
 */
export interface PricingBlockSelect<T extends boolean = true> {
  plans?:
    | T
    | {
        name?: T;
        price?:
          | T
          | {
              amount?: T;
              currency?: T;
              period?: T;
            };
        description?: T;
        features?:
          | T
          | {
              text?: T;
              included?: T;
              id?: T;
            };
        cta?:
          | T
          | {
              text?: T;
              link?: T;
              variant?: T;
            };
        highlighted?: T;
        id?: T;
      };
  layout?:
    | T
    | {
        columns?: T;
        style?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TimelineBlock_select".
 */
export interface TimelineBlockSelect<T extends boolean = true> {
  items?:
    | T
    | {
        date?: T;
        content?:
          | T
          | {
              title?: T;
              description?: T;
              media?: T;
            };
        id?: T;
      };
  layout?:
    | T
    | {
        style?: T;
        density?: T;
        connector?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  active?: T;
  tags?: T;
  createdBy?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions_select".
 */
export interface QuestionsSelect<T extends boolean = true> {
  questionText?: T;
  media?:
    | T
    | {
        type?: T;
        image?: T;
        video?: T;
        id?: T;
      };
  type?: T;
  options?:
    | T
    | {
        text?: T;
        isCorrect?: T;
        id?: T;
      };
  correctAnswer?: T;
  marks?: T;
  hasNegativeMarking?: T;
  negativeMarks?: T;
  difficulty?: T;
  explanation?: T;
  slug?: T;
  slugLock?: T;
  createdBy?: T;
  tags?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exams_select".
 */
export interface ExamsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  questions?: T;
  duration?: T;
  totalMarks?: T;
  status?: T;
  startDate?: T;
  endDate?: T;
  slug?: T;
  slugLock?: T;
  createdBy?: T;
  tags?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "results_select".
 */
export interface ResultsSelect<T extends boolean = true> {
  exam?: T;
  student?: T;
  submission?: T;
  score?: T;
  percentage?: T;
  correctAnswers?: T;
  incorrectAnswers?: T;
  feedback?: T;
  gradedAt?: T;
  slug?: T;
  slugLock?: T;
  displayTitle?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions_select".
 */
export interface SubmissionsSelect<T extends boolean = true> {
  exam?: T;
  student?: T;
  answers?:
    | T
    | {
        questionIndex?: T;
        selectedOption?: T;
        id?: T;
      };
  startTime?: T;
  submittedAt?: T;
  status?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  description?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  searchableContent?: T;
  href?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Navigation items for the site
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nav".
 */
export interface Nav {
  id: number;
  logo?: (number | null) | Media;
  navItems?:
    | {
        label: string;
        link: string;
        newTab?: boolean | null;
        subNavItems?:
          | {
              label: string;
              link: string;
              newTab?: boolean | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "nav_select".
 */
export interface NavSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        label?: T;
        link?: T;
        newTab?: T;
        subNavItems?:
          | T
          | {
              label?: T;
              link?: T;
              newTab?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}